filter(ASV %in% blast_dups_asvs$ASV)
# Isolate single hits
blast_sing <- blast_best %>%
filter(!(ASV %in% blast_dups_asvs$ASV))
blast_dups_eval <- blast_dups %>%
group_by(ASV) %>%
summarize(blast_evalue = min(blast_evalue)) %>% # isolate lowest e-value hit
ungroup()
# Filter by min. e-value
blast_dups <- blast_dups %>%
semi_join(blast_dups_eval)
# Remaining duplicates
blast_dups_logic2 <- duplicated(blast_dups$ASV)
blast_dups_asvs2 <- blast_dups %>%
add_column(duplicated = blast_dups_logic2) %>%
filter(duplicated==TRUE) %>%
select(ASV) %>%
unique() %>%
as.list()
blast_dups2 <- filter(blast_dups, ASV %in% blast_dups_asvs2$ASV)
blast_dups2
# Isolate OTU hits from taxonomy info
tax_dups <- filter(incorp_tax, OTU %in% unique(blast_dups2$blast_OTU)) %>%
unique()
# Merge with blast results
blast_dups2 <- blast_dups2 %>%
left_join(tax_dups, by=join_by(blast_OTU==OTU))
blast_dups2
# Phylum level
blast_dups2 %>%
ggplot(aes(x=Phylum, y=blast_identity, color=ASV)) +
geom_point(alpha=0.8) +
facet_wrap(~ASV, scales = "free") +
theme_test() +
theme(legend.position = "none",
axis.text.y = element_blank())
# Class
blast_dups2 %>%
ggplot(aes(x=Class, y=blast_identity, color=ASV)) +
geom_point(alpha=0.8) +
facet_wrap(~ASV, scales = "free") +
theme_test() +
theme(legend.position = "none",
axis.text.y = element_blank())
# Order
blast_dups2 %>%
ggplot(aes(x=Order, y=blast_identity, color=ASV)) +
geom_point(alpha=0.8) +
facet_wrap(~ASV, scales = "free") +
theme_test() +
theme(legend.position = "none",
axis.text.y = element_blank())
# Family
blast_dups2 %>%
ggplot(aes(x=Family, y=blast_identity, color=ASV)) +
geom_point(alpha=0.8) +
facet_wrap(~ASV, scales = "free") +
theme_test() +
theme(legend.position = "none",
axis.text.y = element_blank())
# Genus
blast_dups2 %>%
ggplot(aes(x=Genus, y=blast_identity, color=ASV)) +
geom_point(alpha=0.8) +
facet_wrap(~ASV, scales = "free") +
theme_test() +
theme(legend.position = "none",
axis.text.y = element_blank())
# Species
blast_dups2 %>%
ggplot(aes(x=Species, y=blast_identity, color=ASV)) +
geom_point(alpha=0.8) +
facet_wrap(~ASV, scales = "free") +
theme_test() +
theme(legend.position = "none",
axis.text.y = element_blank())
# Put single hits back in with duplicate hits
blast_mh <- bind_rows(blast_sing, blast_dups) %>%
mutate(multiple_hit=if_else(ASV %in% blast_dups_asvs2$ASV, "yes", "no")) # Add multiple hit warning column
blast_mh
# Reformat incorporator data
incorp_sig <- incorp_sig %>%
mutate(label=paste0(OTU, ecosystem, day)) # create id column
incorp_meta <- select(incorp_sig, label, OTU, ecosystem, day) %>%
unique()
incorp_long <- incorp_sig %>%
add_column(incorporator = "yes") %>%
select(label, OTU, ecosystem, day, substrate, incorporator) %>%
pivot_wider(id_cols=label, names_from=substrate, values_from=incorporator) %>%
mutate_all(~ if_else(is.na(.x), "no", .x))
incorp_final <- full_join(incorp_long, incorp_meta, by=join_by(label)) %>%
select(label, OTU, ecosystem, day, palmitic_acid=`palmitic acid`, amino_acid=`amino acid`, xylose, cellulose, vanillin)
incorp_final
# Join BLAST results with incorporation data
blast_incorp <- full_join(incorp_final, blast_mh, by=join_by(OTU==blast_OTU)) %>%
filter(!is.na(ASV)) %>%
rename(blast_OTU=OTU, incorp_label=label, incorp_day=day, incorp_eco=ecosystem) %>%
select(ASV, blast_OTU, blast_identity, blast_evalue, multiple_hit, incorp_label, incorp_eco, incorp_day, palmitic_acid:vanillin) %>%
arrange(ASV)
# Reformat
blast_incorp <- blast_incorp %>%
pivot_longer(cols=c(palmitic_acid:vanillin), names_to="substrate", values_to="incorporator")
blast_incorp
blast_incorp_earliest <- data_frame()
for (a in unique(blast_incorp$ASV)) {
data_a <- filter(blast_incorp, ASV==a & incorporator=="yes") # isolate substrates that a incorporated
data_earliest <- data_a %>%
group_by(blast_OTU, substrate) %>% # for each substrate and OTU hit per ASV...
summarize(incorp_earliest_day = min(incorp_day)) %>% # which was the earliest day of uptake?
add_column(ASV=a)
blast_incorp_earliest <- bind_rows(blast_incorp_earliest, data_earliest)
}
blast_incorp_earliest
# Reformat data frame
blast_incorp <- blast_incorp %>%
left_join(blast_incorp_earliest) %>% # combine with earliest day of incorporation data
filter(incorporator=="yes") %>%  # remove straggling non-incorporators
select(ASV:multiple_hit, substrate, incorp_earliest_day) %>%
filter(!is.na(incorp_earliest_day)) %>% # remove rows with substrates that weren't incorporated
blast_incorp
# Reformat data frame
blast_incorp <- blast_incorp %>%
left_join(blast_incorp_earliest) %>% # combine with earliest day of incorporation data
filter(incorporator=="yes") %>%  # remove non-incorporators
select(ASV:multiple_hit, substrate, incorp_earliest_day) %>%
filter(!is.na(incorp_earliest_day)) %>% # remove rows with substrates that weren't incorporated
blast_incorp
# Reformat data frame
blast_incorp <- blast_incorp %>%
left_join(blast_incorp_earliest) %>% # combine with earliest day of incorporation data
filter(incorporator=="yes") %>%  # remove non-incorporators
select(ASV:multiple_hit, substrate, incorp_earliest_day) %>%
filter(!is.na(incorp_earliest_day)) # remove rows with substrates that weren't incorporated
blast_incorp
asv_identity <- blast_incorp %>%
group_by(ASV) %>%
summarize(identity=mean(blast_identity)) %>%
ungroup()
mean(asv_identity$identity)
min(asv_identity$identity)
max(asv_identity$identity)
hist(asv_identity$identity, main="Histogram", xlab="Percent identity to nearest BLAST hit")
asv_evalue <- blast_incorp %>%
group_by(ASV) %>%
summarize(evalue=mean(blast_evalue)) %>%
ungroup()
mean(asv_evalue$evalue)
min(asv_evalue$evalue)
max(asv_evalue$evalue)
median(asv_evalue$evalue)
mean(asv_evalue$evalue)
median(asv_evalue$evalue)
min(asv_evalue$evalue)
max(asv_evalue$evalue)
median(asv_identity$identity)
mean(asv_identity$identity)
median(asv_identity$identity)
mean(asv_identity$identity)
min(asv_identity$identity)
blast_incorp %>%
left_join(blast_incorp_earliest) %>% # combine with earliest day of incorporation data
filter(incorporator=="yes") %>%  # remove non-incorporators
select(ASV:multiple_hit, substrate, incorp_earliest_day)
blast_incorp %>%
left_join(blast_incorp_earliest) %>% # combine with earliest day of incorporation data
filter(incorporator=="yes")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results = "show")
knitr::opts_chunk$set(message = FALSE)
# Clear working directory, load in packages, generate package info
rm(list=ls())
library("tidyverse")
sessionInfo()
# Incorporator data from DulLC
incorp <- readRDS("../cluster_fullcyc2/fullcyc2_l2fc_testoutput.rds")
incorp
# Taxonomy of incorporators
incorp_tax <- incorp %>% select(OTU, Phylum:Species)
# Reformat and exclude non-significant results
incorp_sig <- incorp %>%
mutate(ecosystem = gsub(".substrate == '12C-Con' & day == '[0-9]+' & ecosystem == '([a-z]+)'.+", "\\1", .id), # separate out .id column
day = gsub(".substrate == '12C-Con' & day == '([0-9]+)' .+", "\\1", .id),
day = as.numeric(day),
substrate = gsub(".+substrate == '13C-([a-z]+)'.+", "\\1", .id, ignore.case=T),
substrate = case_when(substrate=="Pal" ~ "palmitic acid",
substrate=="Ami" ~ "amino acid",
substrate=="Xyl" ~ "xylose",
substrate=="Cel" ~ "cellulose",
substrate=="Van" ~ "vanillin")) %>%
select(OTU, ecosystem, day, substrate, log2FoldChange, padj) %>%
filter(padj < 0.05) # filter incorporators, Sam says deseq2 was set up so negative log2foldchange indicates incorporation
incorp_sig
incorp_otus <- select(incorp_sig, OTU) %>%
unique()
growth_asvs <- readRDS("../data_intermediate/NIFA_grests_final_ind.rds") %>%
select(ASV) %>%
unique()
blast <- read_tsv("../blast_fullcyc2/nifa_fullcyc2_blastn_parsed.txt")
head(blast)
# Select best hit(s)
blast_best <- filter(blast, Identity >= 97) %>% # remove hits lower than 97% identity
group_by(Query) %>%
summarize(Identity = max(Identity)) %>% # choose highest identity match
ungroup()
blast_best <- semi_join(blast, blast_best)
blast_best
# Tidy up
blast_best <- select(blast_best, ASV=Query, blast_OTU=Hit, blast_identity=Identity, blast_evalue=Evalue)
# Some summary
length(unique(blast_best$Query)) # ASVs matched with at least 97% identity
min(blast_best$Identity) # lowest identity match in queries
# Isolate ASVs with multiple highest hits
blast_dups_logic <- duplicated(blast_best$ASV)
blast_dups_asvs <- blast_best %>%
add_column(duplicated = blast_dups_logic) %>%
filter(duplicated==TRUE) %>%
select(ASV) %>%
unique() %>%
as.list()
# How many ASVs with duplicate equally best hits?
length(blast_dups_asvs$ASV)
# Isolate duplicate hits
blast_dups <- blast_best %>%
filter(ASV %in% blast_dups_asvs$ASV)
# Isolate single hits
blast_sing <- blast_best %>%
filter(!(ASV %in% blast_dups_asvs$ASV))
blast_dups_eval <- blast_dups %>%
group_by(ASV) %>%
summarize(blast_evalue = min(blast_evalue)) %>% # isolate lowest e-value hit
ungroup()
# Filter by min. e-value
blast_dups <- blast_dups %>%
semi_join(blast_dups_eval)
# Remaining duplicates
blast_dups_logic2 <- duplicated(blast_dups$ASV)
blast_dups_asvs2 <- blast_dups %>%
add_column(duplicated = blast_dups_logic2) %>%
filter(duplicated==TRUE) %>%
select(ASV) %>%
unique() %>%
as.list()
blast_dups2 <- filter(blast_dups, ASV %in% blast_dups_asvs2$ASV)
blast_dups2
# Isolate OTU hits from taxonomy info
tax_dups <- filter(incorp_tax, OTU %in% unique(blast_dups2$blast_OTU)) %>%
unique()
# Merge with blast results
blast_dups2 <- blast_dups2 %>%
left_join(tax_dups, by=join_by(blast_OTU==OTU))
blast_dups2
# Phylum level
blast_dups2 %>%
ggplot(aes(x=Phylum, y=blast_identity, color=ASV)) +
geom_point(alpha=0.8) +
facet_wrap(~ASV, scales = "free") +
theme_test() +
theme(legend.position = "none",
axis.text.y = element_blank())
# Class
blast_dups2 %>%
ggplot(aes(x=Class, y=blast_identity, color=ASV)) +
geom_point(alpha=0.8) +
facet_wrap(~ASV, scales = "free") +
theme_test() +
theme(legend.position = "none",
axis.text.y = element_blank())
# Order
blast_dups2 %>%
ggplot(aes(x=Order, y=blast_identity, color=ASV)) +
geom_point(alpha=0.8) +
facet_wrap(~ASV, scales = "free") +
theme_test() +
theme(legend.position = "none",
axis.text.y = element_blank())
# Family
blast_dups2 %>%
ggplot(aes(x=Family, y=blast_identity, color=ASV)) +
geom_point(alpha=0.8) +
facet_wrap(~ASV, scales = "free") +
theme_test() +
theme(legend.position = "none",
axis.text.y = element_blank())
# Genus
blast_dups2 %>%
ggplot(aes(x=Genus, y=blast_identity, color=ASV)) +
geom_point(alpha=0.8) +
facet_wrap(~ASV, scales = "free") +
theme_test() +
theme(legend.position = "none",
axis.text.y = element_blank())
# Species
blast_dups2 %>%
ggplot(aes(x=Species, y=blast_identity, color=ASV)) +
geom_point(alpha=0.8) +
facet_wrap(~ASV, scales = "free") +
theme_test() +
theme(legend.position = "none",
axis.text.y = element_blank())
# Put single hits back in with duplicate hits
blast_mh <- bind_rows(blast_sing, blast_dups) %>%
mutate(multiple_hit=if_else(ASV %in% blast_dups_asvs2$ASV, "yes", "no")) # Add multiple hit warning column
blast_mh
# Reformat incorporator data
incorp_sig <- incorp_sig %>%
mutate(label=paste0(OTU, ecosystem, day)) # create id column
incorp_meta <- select(incorp_sig, label, OTU, ecosystem, day) %>%
unique()
incorp_long <- incorp_sig %>%
add_column(incorporator = "yes") %>%
select(label, OTU, ecosystem, day, substrate, incorporator) %>%
pivot_wider(id_cols=label, names_from=substrate, values_from=incorporator) %>%
mutate_all(~ if_else(is.na(.x), "no", .x))
incorp_final <- full_join(incorp_long, incorp_meta, by=join_by(label)) %>%
select(label, OTU, ecosystem, day, palmitic_acid=`palmitic acid`, amino_acid=`amino acid`, xylose, cellulose, vanillin)
incorp_final
# Join BLAST results with incorporation data
blast_incorp <- full_join(incorp_final, blast_mh, by=join_by(OTU==blast_OTU)) %>%
filter(!is.na(ASV)) %>%
rename(blast_OTU=OTU, incorp_label=label, incorp_day=day, incorp_eco=ecosystem) %>%
select(ASV, blast_OTU, blast_identity, blast_evalue, multiple_hit, incorp_label, incorp_eco, incorp_day, palmitic_acid:vanillin) %>%
arrange(ASV)
# Reformat
blast_incorp <- blast_incorp %>%
pivot_longer(cols=c(palmitic_acid:vanillin), names_to="substrate", values_to="incorporator")
blast_incorp
blast_incorp_earliest <- data_frame()
for (a in unique(blast_incorp$ASV)) {
data_a <- filter(blast_incorp, ASV==a & incorporator=="yes") # isolate substrates that a incorporated
data_earliest <- data_a %>%
group_by(blast_OTU, substrate) %>% # for each substrate and OTU hit per ASV...
summarize(incorp_earliest_day = min(incorp_day)) %>% # which was the earliest day of uptake?
add_column(ASV=a)
blast_incorp_earliest <- bind_rows(blast_incorp_earliest, data_earliest)
}
blast_incorp_earliest
# Reformat data frame
blast_incorp2 <- blast_incorp %>%
left_join(blast_incorp_earliest) %>% # combine with earliest day of incorporation data
filter(incorporator=="yes") %>%  # remove non-incorporators
select(ASV:multiple_hit, substrate, incorp_earliest_day) %>%
filter(!is.na(incorp_earliest_day)) # remove rows with substrates that weren't incorporated
blast_incorp2
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results = "show")
knitr::opts_chunk$set(message = FALSE)
# Agricultural ASVs before estimation
abund %>%
mutate(ASV = gsub("[a-z]+[1-3]_(.+)", "\\1", label, ignore.case = TRUE)) %>%
filter(Soil=="Ag") %>%
select(ASV, Replicate) %>%
group_by(Replicate) %>%
summarize(rich = n())
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results = "show")
knitr::opts_chunk$set(message = FALSE)
# Clear working directory, load in packages, generate package info
rm(list=ls())
library("tidyverse")
sessionInfo()
# ggplot theme
# See: https://benjaminlouis-stat.fr/en/blog/2020-05-21-astuces-ggplot-rmarkdown/
theme_clean <- function(base_size = 14) {
theme_test(base_size = base_size) %+replace%
theme(axis.title = element_text(size=12),
axis.text = element_text(size=10, color="black"),
legend.text = element_text(size=10),
legend.title = element_text(size=10),
panel.border = element_rect(color="black"))
}
# Growth estimates
growth <- readRDS("../data_intermediate/NIFA_grests_final_ind.rds")
# Death estimates
death <- readRDS("../data_intermediate/NIFA_dests_final_ind.rds")
# Paprica estimates
pap <- readRDS("../data_intermediate/NIFA_paprica_ests.rds")
# Prepped normalized abundnace data
abund <- readRDS("../data_intermediate/NIFA_norm_prepped.rds")
# Taxonomy
tax <- read_tsv("../data_amplicon/NIFA2/final/NIFA2.taxonomy-final.tsv")
# metadata
meta <- read_tsv("../NIFA_metadata.tsv")
# Add paprica estimates
growth2 <- growth %>%
left_join(pap)
death2 <- death %>%
left_join(pap)
# Combine growth and death estimates
growth_death <- death2 %>%
rename(g="h") %>%
bind_rows(growth2) %>%
mutate(type = if_else(slope < 0, "death", "growth"),
start_abund_corr = start_abund/n16S,
end_abund_corr = end_abund/n16S,
change_abund_corr = change_abund/n16S) %>%
select(label:end_day, start_abund_corr, end_abund_corr, change_abund_corr, n16S:type)
# Agricultural ASVs before estimation
abund %>%
mutate(ASV = gsub("[a-z]+[1-3]_(.+)", "\\1", label, ignore.case = TRUE)) %>%
filter(Soil=="Ag") %>%
select(ASV, Replicate) %>%
group_by(Replicate) %>%
summarize(rich = n())
abund %>%
mutate(ASV = gsub("[a-z]+[1-3]_(.+)", "\\1", label, ignore.case = TRUE)) %>%
filter(Soil=="Ag") %>%
select(ASV, Replicate)
# Agricultural ASVs before estimation
abund %>%
mutate(ASV = gsub("[a-z]+[1-3]_(.+)", "\\1", label, ignore.case = TRUE)) %>%
filter(Soil=="Ag") %>%
select(ASV, Replicate) %>%
group_by(Replicate) %>%
summarize(rich = n())
# Agricultural ASVs before estimation
abund %>%
mutate(ASV = gsub("[a-z]+[1-3]_(.+)", "\\1", label, ignore.case = TRUE)) %>%
filter(Soil=="Ag") %>%
select(ASV, Replicate) %>%
group_by(Replicate) %>%
summarize(rich = n()) %>%
ungroup() %>%
summarize(rich_mean = mean(rich),
rich_sd = sd(rich))
# Meadow
abund %>%
mutate(ASV = gsub("[a-z]+[1-3]_(.+)", "\\1", label, ignore.case = TRUE)) %>%
filter(Soil=="Meadow") %>%
select(ASV, Replicate) %>%
group_by(Replicate) %>%
summarize(rich = n()) %>%
ungroup() %>%
summarize(rich_mean = mean(rich),
rich_sd = sd(rich))
# Agricultural ASVs before estimation
abund %>%
mutate(ASV = gsub("[a-z]+[1-3]_(.+)", "\\1", label, ignore.case = TRUE)) %>%
filter(Soil=="Ag") %>%
select(ASV, Replicate) %>%
group_by(Replicate) %>%
summarize(rich = n()) %>%
ungroup() %>%
summarize(rich_mean = mean(rich),
rich_sd = sd(rich))
# Meadow
abund %>%
mutate(ASV = gsub("[a-z]+[1-3]_(.+)", "\\1", label, ignore.case = TRUE)) %>%
filter(Soil=="Meadow") %>%
select(ASV, Replicate) %>%
group_by(Replicate) %>%
summarize(rich = n()) %>%
ungroup() %>%
summarize(rich_mean = mean(rich),
rich_sd = sd(rich))
# Agricultural ASVs before estimation
abund %>%
mutate(ASV = gsub("[a-z]+[1-3]_(.+)", "\\1", label, ignore.case = TRUE)) %>%
filter(Soil=="Ag") %>%
select(ASV, Replicate) %>%
unique() %>%
group_by(Replicate) %>%
summarize(rich = n()) %>%
ungroup() %>%
summarize(rich_mean = mean(rich),
rich_sd = sd(rich))
# Agricultural ASVs before estimation
abund %>%
mutate(ASV = gsub("[a-z]+[1-3]_(.+)", "\\1", label, ignore.case = TRUE)) %>%
filter(Soil=="Ag") %>%
select(ASV, Replicate) %>%
unique() %>%
group_by(Replicate) %>%
summarize(rich = n()) %>%
ungroup() %>%
summarize(rich_mean = mean(rich),
rich_sd = sd(rich))
# Meadow
abund %>%
mutate(ASV = gsub("[a-z]+[1-3]_(.+)", "\\1", label, ignore.case = TRUE)) %>%
filter(Soil=="Meadow") %>%
select(ASV, Replicate) %>%
unique() %>%
group_by(Replicate) %>%
summarize(rich = n()) %>%
ungroup() %>%
summarize(rich_mean = mean(rich),
rich_sd = sd(rich))
# Phyloseq, rarefied
physeq_rare <- readRDS("../data_intermediate/NIFA_physeq_rare.rds")
# Distance, weighted unifrac
wuni_dist <- distance(physeq_rare, method="wunifrac")
# Distance, unweighted unifrac
uni_dist <- distance(physeq_rare, method="unifrac")
wuni_dist
# Ordinate, NMDS
wuni_nmds <- ordinate(physeq_rare, method="NMDS", distance=wuni_dist)
# Visualize
plot_ordination(physeq_rare, nmds_wuni, color="Soil") +
facet_wrap(~Day) +
theme_test()
# Distance, weighted unifrac
wuni_dist <- distance(physeq_rare, method="PCoA")
# Distance, weighted unifrac
wuni_dist <- distance(physeq_rare, method="pcoa")
?distance
# Distance, weighted unifrac
wuni_dist <- distance(physeq_rare, method="DPCoA")
# Ordinate, NMDS
nmds_wuni <- ordinate(physeq_rare, method="NMDS", distance=wuni_dist)
wuni_dist
# Distance, unweighted unifrac
uni_dist <- distance(physeq_rare, method="uunifrac")
